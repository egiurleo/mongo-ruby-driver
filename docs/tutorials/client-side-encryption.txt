.. _client-side-encryption:

======================
Client-Side Encryption
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

New in MongoDB 4.2, client-side encryption allows administrators and developers
to encrypt specific fields in MongoDB documents before inserting them into the
database.

With client-side encryption, developers can encrypt fields client-side without
any server-side configuration or directives. Client-side field-level encryption
supports workloads where applications must guarantee that unauthorized parties,
including server administrators, cannot read the encrypted data.

Installation
------------

Client-side encryption requires the installation of additional packages.

libmongocrypt
~~~~~~~~~~~~~

Libmongocrypt is a C library that the driver uses to perform much of the
client-side encryption functionality. To use client-side encryption, you must
have the libmongocrypt binary on your machine.

To download a pre-built binary (recommended):

- Download a tarball of all libmongocrypt variations from this `AWS bucket <https://s3.amazonaws.com/mciuploads/libmongocrypt/all/master/latest/libmongocrypt-all.tar.gz>`_.

- Unzip the file you downloaded. You will see a list of folders, each
  corresponding to an operating system. Find the folder that matches your
  operating system and open it.

- Inside that folder, open the folder called "nocrypto." In either the
  lib or lb64 folder, you will find the libmongocrypt.so or
  libmongocrypt.dylib or libmongocrypt.dll file, depending on your OS.

- Move that file to wherever you want to keep it on your machine. You may delete
  the other files included in the tarball.

To build from source:

- Follow the instructions in the README on the `libmongocrypt GitHub repo <https://github.com/mongodb/libmongocrypt>`_.

mongocryptd
~~~~~~~~~~~

Mongocryptd is a daemon that tells the driver which fields to encrypt in a
given operation. It is only required for automatic encryption, which is an
enterprise-only feature. If you only intend to use explicit encryption, you may
skip this step.

Mongocryptd comes pre-packaged with enterprise builds of the MongoDB server
(versions 4.2 and newer). If you must install mongocryptd separately, follow
the `installation instructions in the MongoDB manual <https://docs.mongodb.com/manual/reference/security-client-side-encryption-appendix/#installation>`_.

Automatic Encryption
--------------------

Automatic encryption is a feature that allows users to configure a
``Mongo::Client`` instance to always encrypt specific data fields when performing
document operations. Once the ``Mongo::Client`` is configured, the experience of
using it is unchanged, but it automatically encrypts fields when writing data to
the database and automatically decrypts fields when reading data. Automatic
encryption is an enterprise feature.

Creating a Master Key
~~~~~~~~~~~~~~~~~~~~~

The first step to configuting an auto-encryption client is to create an encryption
master key and set up the key management service (KMS) that you plan to use. You may
either set up a local master key or use Amazon's AWS Key Management Service. In
both cases, you must set up the ``:kms_providers`` option, which you will use to
create encryption data keys and configure the ``Mongo::Client`` instance used
to encrypt data.

1. Local KMS Setup
To set up local KMS information, you must generate a new master key. A local
master key is a Base64-encoded 96-byte string.

.. code-block:: ruby

  require 'base64'
  require 'securerandom'

  key = Base64.encode64(SecureRandom.random_bytes(96))
  kms_providers = {
    local: {
      key: key
    }
  }

1. AWS KMS Setup
To use the AWS KMS provider, create an encryption master key in the AWS Key
Management Service. For more information, read the
`Amazon Web Services KMS section in the MongoDB Manual <https://docs.mongodb.com/manual/core/security-client-side-encryption-key-management/#field-level-encryption-aws-kms>`_.

Locate the access key and secret access key for the IAM user who has permissions
to use your AWS master key, and use that information to create the ``:kms_providers``
option:

.. code-block:: ruby

  kms_providers = {
    aws: {
      access_key_id: "YOUR AWS ACCESS KEY ID",
      secret_access_key: "YOUR AWS SECRET ACCESS KEY"
    }
  }

Creating a Data Key
~~~~~~~~~~~~~~~~~~~

It is necessary to 


Explicit Encryption
-------------------
Documentation for explicit encryption will be provided soon.

